import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.message_contents";
/** Ciphertext is a generic structure for encrypted payload. */
/**
 * Ciphertext represents encrypted payload.
 * It is definited as a union to support cryptographic algorithm agility.
 * The payload is accompanied by the cryptographic parameters
 * required by the chosen encryption scheme.
 */
export interface Ciphertext {
    aes256GcmHkdfSha256: Ciphertext_Aes256gcmHkdfsha256 | undefined;
}
/**
 * Encryption: AES256-GCM
 * Key derivation function: HKDF-SHA256
 */
export interface Ciphertext_Aes256gcmHkdfsha256 {
    /** 32 bytes */
    hkdfSalt: Uint8Array;
    /** 12 bytes */
    gcmNonce: Uint8Array;
    /** encrypted payload */
    payload: Uint8Array;
}
export declare const Ciphertext: {
    encode(message: Ciphertext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Ciphertext;
    fromJSON(object: any): Ciphertext;
    toJSON(message: Ciphertext): unknown;
    fromPartial<I extends {
        aes256GcmHkdfSha256?: {
            hkdfSalt?: Uint8Array | undefined;
            gcmNonce?: Uint8Array | undefined;
            payload?: Uint8Array | undefined;
        } | undefined;
    } & {
        aes256GcmHkdfSha256?: ({
            hkdfSalt?: Uint8Array | undefined;
            gcmNonce?: Uint8Array | undefined;
            payload?: Uint8Array | undefined;
        } & {
            hkdfSalt?: Uint8Array | undefined;
            gcmNonce?: Uint8Array | undefined;
            payload?: Uint8Array | undefined;
        } & { [K in Exclude<keyof I["aes256GcmHkdfSha256"], keyof Ciphertext_Aes256gcmHkdfsha256>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "aes256GcmHkdfSha256">]: never; }>(object: I): Ciphertext;
};
export declare const Ciphertext_Aes256gcmHkdfsha256: {
    encode(message: Ciphertext_Aes256gcmHkdfsha256, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Ciphertext_Aes256gcmHkdfsha256;
    fromJSON(object: any): Ciphertext_Aes256gcmHkdfsha256;
    toJSON(message: Ciphertext_Aes256gcmHkdfsha256): unknown;
    fromPartial<I extends {
        hkdfSalt?: Uint8Array | undefined;
        gcmNonce?: Uint8Array | undefined;
        payload?: Uint8Array | undefined;
    } & {
        hkdfSalt?: Uint8Array | undefined;
        gcmNonce?: Uint8Array | undefined;
        payload?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof Ciphertext_Aes256gcmHkdfsha256>]: never; }>(object: I): Ciphertext_Aes256gcmHkdfsha256;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
