/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "xmtp.message_contents";
function createBaseCiphertext() {
    return { aes256GcmHkdfSha256: undefined };
}
export const Ciphertext = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.aes256GcmHkdfSha256 !== undefined) {
            Ciphertext_Aes256gcmHkdfsha256.encode(message.aes256GcmHkdfSha256, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCiphertext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.aes256GcmHkdfSha256 = Ciphertext_Aes256gcmHkdfsha256.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            aes256GcmHkdfSha256: isSet(object.aes256GcmHkdfSha256)
                ? Ciphertext_Aes256gcmHkdfsha256.fromJSON(object.aes256GcmHkdfSha256)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.aes256GcmHkdfSha256 !== undefined &&
            (obj.aes256GcmHkdfSha256 = message.aes256GcmHkdfSha256
                ? Ciphertext_Aes256gcmHkdfsha256.toJSON(message.aes256GcmHkdfSha256)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCiphertext();
        message.aes256GcmHkdfSha256 =
            object.aes256GcmHkdfSha256 !== undefined &&
                object.aes256GcmHkdfSha256 !== null
                ? Ciphertext_Aes256gcmHkdfsha256.fromPartial(object.aes256GcmHkdfSha256)
                : undefined;
        return message;
    },
};
function createBaseCiphertext_Aes256gcmHkdfsha256() {
    return {
        hkdfSalt: new Uint8Array(),
        gcmNonce: new Uint8Array(),
        payload: new Uint8Array(),
    };
}
export const Ciphertext_Aes256gcmHkdfsha256 = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.hkdfSalt.length !== 0) {
            writer.uint32(10).bytes(message.hkdfSalt);
        }
        if (message.gcmNonce.length !== 0) {
            writer.uint32(18).bytes(message.gcmNonce);
        }
        if (message.payload.length !== 0) {
            writer.uint32(26).bytes(message.payload);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCiphertext_Aes256gcmHkdfsha256();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.hkdfSalt = reader.bytes();
                    break;
                case 2:
                    message.gcmNonce = reader.bytes();
                    break;
                case 3:
                    message.payload = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            hkdfSalt: isSet(object.hkdfSalt)
                ? bytesFromBase64(object.hkdfSalt)
                : new Uint8Array(),
            gcmNonce: isSet(object.gcmNonce)
                ? bytesFromBase64(object.gcmNonce)
                : new Uint8Array(),
            payload: isSet(object.payload)
                ? bytesFromBase64(object.payload)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.hkdfSalt !== undefined &&
            (obj.hkdfSalt = base64FromBytes(message.hkdfSalt !== undefined ? message.hkdfSalt : new Uint8Array()));
        message.gcmNonce !== undefined &&
            (obj.gcmNonce = base64FromBytes(message.gcmNonce !== undefined ? message.gcmNonce : new Uint8Array()));
        message.payload !== undefined &&
            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCiphertext_Aes256gcmHkdfsha256();
        message.hkdfSalt = (_a = object.hkdfSalt) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.gcmNonce = (_b = object.gcmNonce) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.payload = (_c = object.payload) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=ciphertext.pb.js.map