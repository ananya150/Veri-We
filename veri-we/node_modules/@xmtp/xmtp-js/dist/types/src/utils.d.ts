import { messageApi } from '@xmtp/proto';
import Long from 'long';
export declare type IsRetryable = (err?: Error) => boolean;
export declare const buildContentTopic: (name: string) => string;
export declare const buildDirectMessageTopic: (sender: string, recipient: string) => string;
export declare const buildDirectMessageTopicV2: (randomString: string) => string;
export declare const buildUserContactTopic: (walletAddr: string) => string;
export declare const buildUserIntroTopic: (walletAddr: string) => string;
export declare const buildUserInviteTopic: (walletAddr: string) => string;
export declare const buildUserPrivateStoreTopic: (walletAddr: string) => string;
export declare const sleep: (ms: number) => Promise<void>;
export declare const promiseWithTimeout: <T>(timeoutMs: number, promise: () => Promise<T>, failureMessage?: string | undefined) => Promise<T>;
export declare function retry<T extends (...arg0: any[]) => any>(fn: T, args: Parameters<T>, maxRetries: number, sleepTime: number, isRetryableFn?: IsRetryable, retryCount?: number): Promise<Awaited<ReturnType<T>>>;
export declare type EnvelopeMapper<Out> = (env: messageApi.Envelope) => Promise<Out>;
export declare function mapPaginatedStream<Out>(gen: AsyncGenerator<messageApi.Envelope[]>, mapper: EnvelopeMapper<Out>): AsyncGenerator<Out[]>;
export declare function dateToNs(date: Date): Long;
export declare function nsToDate(ns: Long): Date;
export declare const toNanoString: (d: Date | undefined) => undefined | string;
export declare const fromNanoString: (s: string | undefined) => undefined | Date;
