{"ast":null,"code":"var _jsxFileName = \"/Users/devaanshpatel02/Desktop/trial/ethsf2022-main/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { WorldIDWidget } from '@worldcoin/id';\nimport { defaultAbiCoder as ABI } from 'ethers/lib/utils';\nimport { useState } from 'react';\nimport verify from './verify.png';\nimport MainABI from './Main.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [wallet_status, set_wallet_status] = useState('Connect Wallet');\n  const [account, set_account] = useState('');\n  const [chain_id, set_chain_id] = useState('');\n  const [network_status, set_network_status] = useState('Not Connected');\n  const {\n    ethereum\n  } = window;\n  const [verification, setVerification] = useState();\n  const networks = {\n    \"0x1\": \"ETH Mainnet\",\n    \"0x89\": \"Polygon\",\n    \"0x3\": \"Ropsten\",\n    \"0x2a\": \"Kovan\",\n    \"0x4\": \"Rinkeby\",\n    \"0x5\": \"Goerli\",\n    \"0x13881\": \"Mumbai\"\n  };\n  function handleVerification(verification) {\n    console.log(verification);\n    let {\n      merkle_root,\n      nullifier_hash,\n      proof\n    } = verification;\n    let depackedProof = ABI.decode(['uint256[8]'], proof)[0];\n    console.log(depackedProof);\n    setVerification({\n      merkle_root,\n      nullifier_hash,\n      depackedProof\n    });\n  }\n  async function handleConnect(new_account) {\n    set_account(new_account);\n    document.getElementById(\"input_address\").value = new_account;\n    set_wallet_status(\"Connected as \" + new_account.substring(0, 6) + \"...\" + new_account.slice(-4));\n    let connected_chain = await ethereum.request({\n      method: \"eth_chainId\"\n    });\n    set_chain_id(connected_chain);\n    set_network_status(\"Connected to: \" + (networks[connected_chain] || connected_chain));\n    ethereum.on('chainChanged', _chainId => window.location.reload());\n    console.log(connected_chain);\n  }\n  async function connectWallet() {\n    try {\n      let accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      handleConnect(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function handleQuery() {\n    let query_address = document.getElementById(\"input_address\").value;\n    fetch(`https://api.covalenthq.com/v1/1/address/${query_address}/balances_v2/?quote-currency=USD&format=JSON&nft=true&no-nft-fetch=false&key=ckey_79c997c7e8084e0f9df0af9824c`).then(response => response.json()).then(data => {\n      console.log(data.data.items);\n    });\n  }\n  async function handleTransaction() {\n    // eslint-disable-next-line no-undef\n    let metamask_web3 = new Web3(window.ethereum);\n    let metamask_contract = new metamask_web3.eth.Contract(MainABI, \"0xf24D9124C6005719F6a04CcB7B47e814F27A100c\");\n    let {\n      merkle_root,\n      nullifier_hash,\n      depackedProof\n    } = verification;\n    await metamask_contract.methods.verifyAndExecute(account, merkle_root, nullifier_hash, depackedProof, document.getElementById(\"input_address\")).send({\n      from: account,\n      gas: 3000000\n    });\n  }\n  window.onload = async function () {\n    if (typeof window.ethereum !== 'undefined') {\n      let accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n      if (accounts.length) {\n        handleConnect(accounts[0]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"connect_wallet\",\n      onClick: connectWallet,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"connect_wallet_text\",\n        children: wallet_status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"network_status\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"network_status_icon\",\n        style: {\n          backgroundColor: network_status == \"Connected to: Mumbai\" ? \"lightgreen\" : \"red\",\n          boxShadow: network_status == \"Connected to: Mumbai\" ? \"0px 0px 5px 2px lightgreen\" : \"0px 0px 5px 2px red\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"network_status_text\",\n        children: network_status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input_address\",\n      placeholder: \"Enter an address...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"address_search\",\n      onClick: handleQuery,\n      children: \"Query\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"world_id_widget_wrapper\",\n      children: /*#__PURE__*/_jsxDEV(WorldIDWidget, {\n        actionId: \"wid_staging_98fe2043489b113103d09c334475f84a\",\n        signal: \"sign-in-staging\",\n        onSuccess: verificationResponse => handleVerification(verificationResponse),\n        onError: error => console.error(error),\n        debug: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"verify_button\",\n      onClick: handleTransaction,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"verify_image\",\n        src: verify\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 62\n      }, this), \"Verify ENS\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UZmKkQROSynxQDwlkBCTjeIAFXk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["WorldIDWidget","defaultAbiCoder","ABI","useState","verify","MainABI","App","wallet_status","set_wallet_status","account","set_account","chain_id","set_chain_id","network_status","set_network_status","ethereum","window","verification","setVerification","networks","handleVerification","console","log","merkle_root","nullifier_hash","proof","depackedProof","decode","handleConnect","new_account","document","getElementById","value","substring","slice","connected_chain","request","method","on","_chainId","location","reload","connectWallet","accounts","error","handleQuery","query_address","fetch","then","response","json","data","items","handleTransaction","metamask_web3","Web3","metamask_contract","eth","Contract","methods","verifyAndExecute","send","from","gas","onload","length","backgroundColor","boxShadow","verificationResponse"],"sources":["/Users/devaanshpatel02/Desktop/trial/ethsf2022-main/src/App.js"],"sourcesContent":["import './App.css';\nimport { WorldIDWidget } from '@worldcoin/id';\nimport { defaultAbiCoder as ABI } from 'ethers/lib/utils';\nimport { useState } from 'react';\nimport verify from './verify.png';\nimport MainABI from './Main.json';\n\nfunction App() {\n\n  const [wallet_status, set_wallet_status] = useState('Connect Wallet');\n  const [account, set_account] = useState('');\n  const [chain_id, set_chain_id] = useState('');\n  const [network_status, set_network_status] = useState('Not Connected');\n  const {ethereum} = window;\n  const [verification, setVerification] = useState();\n\n  const networks = {\n    \"0x1\": \"ETH Mainnet\",\n    \"0x89\": \"Polygon\",\n    \"0x3\": \"Ropsten\",\n    \"0x2a\": \"Kovan\",\n    \"0x4\": \"Rinkeby\",\n    \"0x5\": \"Goerli\",\n    \"0x13881\": \"Mumbai\"\n  }\n\n  function handleVerification(verification) {\n    console.log(verification);\n\n    let { merkle_root, nullifier_hash, proof } = verification;\n    let depackedProof = ABI.decode(['uint256[8]'], proof)[0];\n    console.log(depackedProof);\n    setVerification({merkle_root, nullifier_hash, depackedProof});\n  }\n\n  async function handleConnect(new_account) {\n    set_account(new_account);\n    document.getElementById(\"input_address\").value = new_account;\n    set_wallet_status(\"Connected as \" + new_account.substring(0,6) + \"...\" + new_account.slice(-4));\n    let connected_chain = await ethereum.request({method: \"eth_chainId\"});\n    set_chain_id(connected_chain);\n    set_network_status(\"Connected to: \" + (networks[connected_chain] || connected_chain));\n    ethereum.on('chainChanged', (_chainId) => window.location.reload());\n    console.log(connected_chain);\n  }\n\n  async function connectWallet() {\n    try {\n      let accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      handleConnect(accounts[0]);\n    } catch(error) {\n      console.error(error);\n    }\n  }\n\n  async function handleQuery() {\n    let query_address = document.getElementById(\"input_address\").value;\n    fetch(`https://api.covalenthq.com/v1/1/address/${query_address}/balances_v2/?quote-currency=USD&format=JSON&nft=true&no-nft-fetch=false&key=ckey_79c997c7e8084e0f9df0af9824c`)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data.data.items);\n    });\n  }\n\n  async function handleTransaction() {\n    // eslint-disable-next-line no-undef\n    let metamask_web3 = new Web3(window.ethereum);\n    let metamask_contract = new metamask_web3.eth.Contract(MainABI, \"0xf24D9124C6005719F6a04CcB7B47e814F27A100c\");\n\n    let {merkle_root, nullifier_hash, depackedProof} = verification;\n    await metamask_contract.methods.verifyAndExecute(account, merkle_root, nullifier_hash, depackedProof, document.getElementById(\"input_address\")).send({from: account, gas: 3000000})\n  }\n\n  window.onload = async function() {\n    if (typeof window.ethereum !== 'undefined') {\n      let accounts = await ethereum.request({method: 'eth_accounts'});       \n      if (accounts.length) {\n        handleConnect(accounts[0]);\n      }\n    }\n  }\n\n  return (\n    <div id='container'>\n      <div id='connect_wallet' onClick={connectWallet}>\n        <span id='connect_wallet_text'>{wallet_status}</span>\n      </div>\n      <div id='network_status'>\n        <div id='network_status_icon' style={{\n          backgroundColor: network_status == \"Connected to: Mumbai\" ? \"lightgreen\" : \"red\",\n          boxShadow: network_status == \"Connected to: Mumbai\" ? \"0px 0px 5px 2px lightgreen\" : \"0px 0px 5px 2px red\"\n        }}></div>\n        <div id='network_status_text'>{network_status}</div>\n      </div>\n\n      <input id=\"input_address\" placeholder=\"Enter an address...\"></input>\n      <button id=\"address_search\" onClick={handleQuery}>Query</button>\n\n      <div id=\"world_id_widget_wrapper\">\n        <WorldIDWidget \n          actionId='wid_staging_98fe2043489b113103d09c334475f84a'\n          signal='sign-in-staging'\n          onSuccess={(verificationResponse) => handleVerification(verificationResponse)}\n          onError={(error) => console.error(error)}\n          debug={true}\n        />\n      </div>\n      <button id=\"verify_button\" onClick={handleTransaction}><img id=\"verify_image\" src={verify}/>Verify ENS</button>\n    </div>\n    \n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}